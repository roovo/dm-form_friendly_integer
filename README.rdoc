= DataMapper::Types::FormFriendlyInteger

An adaption of the Integer DataMapper type designed to work well with web forms.
It behaves in the same way as the standard DataMapper Integer type when writing
the property to the database but it doesn't try to typecast the property unless
it is an integer string.  The example below illustrates this.

The reason for wanting this behaviour is to ensure that if an invalid entry is
fed into a web form then when the form is re-displayed with it's errors, the
value in the form input will be as it was when it was entered.

== EXAMPLE:

  model MyModel
    include DataMapper::Resource

    property :id,         Serial
    property :a_number,   Integer
    property :ff_number,  FormFriendlyInteger
  end

The +a_number+ property will behave as follows:

  my_model = MyModel.new
  my_model.a_number   = 7
  my_model.ff_number  = 7
  my_model.a_number                       # => 7
  my_model.ff_number                      # => 7
  my_model.save
  Model.get(my_model.id).a_number         # => 7
  Model.get(my_model.id).ff_number        # => 7

  my_model = MyModel.new
  my_model.a_number   = -7
  my_model.ff_number  = -7
  my_model.a_number                       # => -7
  my_model.ff_number                      # => -7
  my_model.save
  Model.get(my_model.id).a_number         # => -7
  Model.get(my_model.id).ff_number        # => -7

  my_model = MyModel.new
  my_model.a_number   = "7.45"
  my_model.ff_number  = "7.45"
  my_model.a_number                       # => 7
  my_model.ff_number                      # => "7.45"
  my_model.save
  Model.get(my_model.id).a_number         # => 7
  Model.get(my_model.id).ff_number        # => 7

  my_model = MyModel.new
  my_model.a_number   = "not a number"
  my_model.ff_number  = "not a number"
  my_model.a_number                       # => nil
  my_model.ff_number                      # => "not a number"
  my_model.save
  Model.get(my_model.id).a_number         # => 0
  Model.get(my_model.id).ff_number        # => 0

  my_model = MyModel.new
  my_model.a_number   = []                # => nothing raised
  my_model.ff_number  = []                # => raise(ArgumentError, '+value+ must be nil or a String')

 
== LICENSE:

(The MIT License)

Copyright (c) 2009 roovo

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
'Software'), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

